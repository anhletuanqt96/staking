/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IPoolFactory {
  export type PoolDeploymentStruct = {
    marginLimit: BigNumberish;
    longToken: AddressLike;
    shortToken: AddressLike;
  };

  export type PoolDeploymentStructOutput = [
    marginLimit: bigint,
    longToken: string,
    shortToken: string
  ] & { marginLimit: bigint; longToken: string; shortToken: string };
}

export interface PoolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployPool"
      | "deploymentFee"
      | "deploymentFeeReceiver"
      | "deploymentFeeToken"
      | "fee"
      | "feeReceiver"
      | "initialize"
      | "isValidPool"
      | "numPools"
      | "owner"
      | "poolBaseAddress"
      | "pools"
      | "proxiableUUID"
      | "renounceOwnership"
      | "roleStore"
      | "setFee"
      | "setFeeReceiver"
      | "setVDex"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vDex"
      | "wETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "FeeChanged"
      | "FeeReceiverChanged"
      | "Initialized"
      | "LPoolPairCreated"
      | "MaxLeverageChanged"
      | "OwnershipTransferred"
      | "PoolKeeperChanged"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployPool",
    values: [IPoolFactory.PoolDeploymentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentFeeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "numPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolBaseAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVDex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "vDex", values?: undefined): string;
  encodeFunctionData(functionFragment: "wETH", values?: undefined): string;

  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBaseAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVDex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vDex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wETH", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeChangedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReceiverChangedEvent {
  export type InputTuple = [receiver: AddressLike];
  export type OutputTuple = [receiver: string];
  export interface OutputObject {
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LPoolPairCreatedEvent {
  export type InputTuple = [
    pool: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    marketId: BigNumberish,
    marginLimit: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    token0: string,
    token1: string,
    marketId: bigint,
    marginLimit: bigint
  ];
  export interface OutputObject {
    pool: string;
    token0: string;
    token1: string;
    marketId: bigint;
    marginLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxLeverageChangedEvent {
  export type InputTuple = [leverage: BigNumberish];
  export type OutputTuple = [leverage: bigint];
  export interface OutputObject {
    leverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolKeeperChangedEvent {
  export type InputTuple = [_poolKeeper: AddressLike];
  export type OutputTuple = [_poolKeeper: string];
  export interface OutputObject {
    _poolKeeper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PoolFactory;
  waitForDeployment(): Promise<this>;

  interface: PoolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployPool: TypedContractMethod<
    [deploymentParameters: IPoolFactory.PoolDeploymentStruct],
    [string],
    "nonpayable"
  >;

  deploymentFee: TypedContractMethod<[], [bigint], "view">;

  deploymentFeeReceiver: TypedContractMethod<[], [string], "view">;

  deploymentFeeToken: TypedContractMethod<[], [string], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  feeReceiver: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _wETH: AddressLike,
      _feeReceiver: AddressLike,
      _owner: AddressLike,
      _vdex: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  isValidPool: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  numPools: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  poolBaseAddress: TypedContractMethod<[], [string], "view">;

  pools: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  roleStore: TypedContractMethod<[], [string], "view">;

  setFee: TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;

  setFeeReceiver: TypedContractMethod<
    [_feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setVDex: TypedContractMethod<[_vdex: AddressLike], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  vDex: TypedContractMethod<[], [string], "view">;

  wETH: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployPool"
  ): TypedContractMethod<
    [deploymentParameters: IPoolFactory.PoolDeploymentStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deploymentFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deploymentFeeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deploymentFeeToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _wETH: AddressLike,
      _feeReceiver: AddressLike,
      _owner: AddressLike,
      _vdex: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isValidPool"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "numPools"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolBaseAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "roleStore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeReceiver"
  ): TypedContractMethod<[_feeReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVDex"
  ): TypedContractMethod<[_vdex: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "vDex"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wETH"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "FeeChanged"
  ): TypedContractEvent<
    FeeChangedEvent.InputTuple,
    FeeChangedEvent.OutputTuple,
    FeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeReceiverChanged"
  ): TypedContractEvent<
    FeeReceiverChangedEvent.InputTuple,
    FeeReceiverChangedEvent.OutputTuple,
    FeeReceiverChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LPoolPairCreated"
  ): TypedContractEvent<
    LPoolPairCreatedEvent.InputTuple,
    LPoolPairCreatedEvent.OutputTuple,
    LPoolPairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxLeverageChanged"
  ): TypedContractEvent<
    MaxLeverageChangedEvent.InputTuple,
    MaxLeverageChangedEvent.OutputTuple,
    MaxLeverageChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolKeeperChanged"
  ): TypedContractEvent<
    PoolKeeperChangedEvent.InputTuple,
    PoolKeeperChangedEvent.OutputTuple,
    PoolKeeperChangedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "FeeChanged(uint256)": TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;
    FeeChanged: TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;

    "FeeReceiverChanged(address)": TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;
    FeeReceiverChanged: TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LPoolPairCreated(address,address,address,uint16,uint16)": TypedContractEvent<
      LPoolPairCreatedEvent.InputTuple,
      LPoolPairCreatedEvent.OutputTuple,
      LPoolPairCreatedEvent.OutputObject
    >;
    LPoolPairCreated: TypedContractEvent<
      LPoolPairCreatedEvent.InputTuple,
      LPoolPairCreatedEvent.OutputTuple,
      LPoolPairCreatedEvent.OutputObject
    >;

    "MaxLeverageChanged(uint256)": TypedContractEvent<
      MaxLeverageChangedEvent.InputTuple,
      MaxLeverageChangedEvent.OutputTuple,
      MaxLeverageChangedEvent.OutputObject
    >;
    MaxLeverageChanged: TypedContractEvent<
      MaxLeverageChangedEvent.InputTuple,
      MaxLeverageChangedEvent.OutputTuple,
      MaxLeverageChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolKeeperChanged(address)": TypedContractEvent<
      PoolKeeperChangedEvent.InputTuple,
      PoolKeeperChangedEvent.OutputTuple,
      PoolKeeperChangedEvent.OutputObject
    >;
    PoolKeeperChanged: TypedContractEvent<
      PoolKeeperChangedEvent.InputTuple,
      PoolKeeperChangedEvent.OutputTuple,
      PoolKeeperChangedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
