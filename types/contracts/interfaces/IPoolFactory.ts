/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IPoolFactory {
  export type PoolDeploymentStruct = {
    marginLimit: BigNumberish;
    longToken: AddressLike;
    shortToken: AddressLike;
  };

  export type PoolDeploymentStructOutput = [
    marginLimit: bigint,
    longToken: string,
    shortToken: string
  ] & { marginLimit: bigint; longToken: string; shortToken: string };
}

export interface IPoolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployPool"
      | "isValidPool"
      | "numPools"
      | "pools"
      | "setFee"
      | "setFeeReceiver"
      | "setVDex"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeChanged"
      | "FeeReceiverChanged"
      | "LPoolPairCreated"
      | "MaxLeverageChanged"
      | "PoolKeeperChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployPool",
    values: [IPoolFactory.PoolDeploymentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "numPools", values?: undefined): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVDex",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "numPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVDex", data: BytesLike): Result;
}

export namespace FeeChangedEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReceiverChangedEvent {
  export type InputTuple = [receiver: AddressLike];
  export type OutputTuple = [receiver: string];
  export interface OutputObject {
    receiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LPoolPairCreatedEvent {
  export type InputTuple = [
    pool: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    marketId: BigNumberish,
    marginLimit: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    token0: string,
    token1: string,
    marketId: bigint,
    marginLimit: bigint
  ];
  export interface OutputObject {
    pool: string;
    token0: string;
    token1: string;
    marketId: bigint;
    marginLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxLeverageChangedEvent {
  export type InputTuple = [leverage: BigNumberish];
  export type OutputTuple = [leverage: bigint];
  export interface OutputObject {
    leverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolKeeperChangedEvent {
  export type InputTuple = [_poolKeeper: AddressLike];
  export type OutputTuple = [_poolKeeper: string];
  export interface OutputObject {
    _poolKeeper: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPoolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolFactory;
  waitForDeployment(): Promise<this>;

  interface: IPoolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployPool: TypedContractMethod<
    [deploymentParameters: IPoolFactory.PoolDeploymentStruct],
    [string],
    "nonpayable"
  >;

  isValidPool: TypedContractMethod<[_pool: AddressLike], [boolean], "view">;

  numPools: TypedContractMethod<[], [bigint], "view">;

  pools: TypedContractMethod<[id: BigNumberish], [string], "view">;

  setFee: TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;

  setFeeReceiver: TypedContractMethod<
    [_feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  setVDex: TypedContractMethod<[_vdex: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployPool"
  ): TypedContractMethod<
    [deploymentParameters: IPoolFactory.PoolDeploymentStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isValidPool"
  ): TypedContractMethod<[_pool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "numPools"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pools"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeReceiver"
  ): TypedContractMethod<[_feeReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVDex"
  ): TypedContractMethod<[_vdex: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeeChanged"
  ): TypedContractEvent<
    FeeChangedEvent.InputTuple,
    FeeChangedEvent.OutputTuple,
    FeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "FeeReceiverChanged"
  ): TypedContractEvent<
    FeeReceiverChangedEvent.InputTuple,
    FeeReceiverChangedEvent.OutputTuple,
    FeeReceiverChangedEvent.OutputObject
  >;
  getEvent(
    key: "LPoolPairCreated"
  ): TypedContractEvent<
    LPoolPairCreatedEvent.InputTuple,
    LPoolPairCreatedEvent.OutputTuple,
    LPoolPairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxLeverageChanged"
  ): TypedContractEvent<
    MaxLeverageChangedEvent.InputTuple,
    MaxLeverageChangedEvent.OutputTuple,
    MaxLeverageChangedEvent.OutputObject
  >;
  getEvent(
    key: "PoolKeeperChanged"
  ): TypedContractEvent<
    PoolKeeperChangedEvent.InputTuple,
    PoolKeeperChangedEvent.OutputTuple,
    PoolKeeperChangedEvent.OutputObject
  >;

  filters: {
    "FeeChanged(uint256)": TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;
    FeeChanged: TypedContractEvent<
      FeeChangedEvent.InputTuple,
      FeeChangedEvent.OutputTuple,
      FeeChangedEvent.OutputObject
    >;

    "FeeReceiverChanged(address)": TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;
    FeeReceiverChanged: TypedContractEvent<
      FeeReceiverChangedEvent.InputTuple,
      FeeReceiverChangedEvent.OutputTuple,
      FeeReceiverChangedEvent.OutputObject
    >;

    "LPoolPairCreated(address,address,address,uint16,uint16)": TypedContractEvent<
      LPoolPairCreatedEvent.InputTuple,
      LPoolPairCreatedEvent.OutputTuple,
      LPoolPairCreatedEvent.OutputObject
    >;
    LPoolPairCreated: TypedContractEvent<
      LPoolPairCreatedEvent.InputTuple,
      LPoolPairCreatedEvent.OutputTuple,
      LPoolPairCreatedEvent.OutputObject
    >;

    "MaxLeverageChanged(uint256)": TypedContractEvent<
      MaxLeverageChangedEvent.InputTuple,
      MaxLeverageChangedEvent.OutputTuple,
      MaxLeverageChangedEvent.OutputObject
    >;
    MaxLeverageChanged: TypedContractEvent<
      MaxLeverageChangedEvent.InputTuple,
      MaxLeverageChangedEvent.OutputTuple,
      MaxLeverageChangedEvent.OutputObject
    >;

    "PoolKeeperChanged(address)": TypedContractEvent<
      PoolKeeperChangedEvent.InputTuple,
      PoolKeeperChangedEvent.OutputTuple,
      PoolKeeperChangedEvent.OutputObject
    >;
    PoolKeeperChanged: TypedContractEvent<
      PoolKeeperChangedEvent.InputTuple,
      PoolKeeperChangedEvent.OutputTuple,
      PoolKeeperChangedEvent.OutputObject
    >;
  };
}
