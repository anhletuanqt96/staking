/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LPoolStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LONG_INDEX"
      | "SHORT_INDEX"
      | "isWethPool"
      | "tokens"
      | "totalReserves"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;

  encodeFunctionData(
    functionFragment: "LONG_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SHORT_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWethPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserves",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LONG_INDEX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SHORT_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWethPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalReserves",
    data: BytesLike
  ): Result;
}

export namespace BorrowEvent {
  export type InputTuple = [
    borrower: AddressLike,
    payee: AddressLike,
    borrowAmount: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    payee: string,
    borrowAmount: bigint
  ];
  export interface OutputObject {
    borrower: string;
    payee: string;
    borrowAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LPoolStorage extends BaseContract {
  connect(runner?: ContractRunner | null): LPoolStorage;
  waitForDeployment(): Promise<this>;

  interface: LPoolStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LONG_INDEX: TypedContractMethod<[], [bigint], "view">;

  SHORT_INDEX: TypedContractMethod<[], [bigint], "view">;

  isWethPool: TypedContractMethod<[], [boolean], "view">;

  tokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  totalReserves: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LONG_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SHORT_INDEX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isWethPool"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalReserves"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;

  filters: {
    "Borrow(address,address,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
  };
}
