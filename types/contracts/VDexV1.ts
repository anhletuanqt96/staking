/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type OrderStruct = {
  trader: AddressLike;
  baseAsset: AddressLike;
  quoteAsset: AddressLike;
  baseAssetAmount: BigNumberish;
  quoteAssetAmount: BigNumberish;
  orderType: BigNumberish;
  side: BigNumberish;
  expiration: BigNumberish;
  nonce: BigNumberish;
};

export type OrderStructOutput = [
  trader: string,
  baseAsset: string,
  quoteAsset: string,
  baseAssetAmount: bigint,
  quoteAssetAmount: bigint,
  orderType: bigint,
  side: bigint,
  expiration: bigint,
  nonce: bigint
] & {
  trader: string;
  baseAsset: string;
  quoteAsset: string;
  baseAssetAmount: bigint;
  quoteAssetAmount: bigint;
  orderType: bigint;
  side: bigint;
  expiration: bigint;
  nonce: bigint;
};

export type OrderBookTradeStruct = {
  baseAssetAddress: AddressLike;
  quoteAssetAddress: AddressLike;
  grossBaseQuantity: BigNumberish;
  grossQuoteQuantity: BigNumberish;
  netBaseQuantity: BigNumberish;
  netQuoteQuantity: BigNumberish;
  makerFeeAssetAddress: AddressLike;
  takerFeeAssetAddress: AddressLike;
  makerFeeQuantity: BigNumberish;
  takerFeeQuantity: BigNumberish;
  price: BigNumberish;
  makerSide: BigNumberish;
};

export type OrderBookTradeStructOutput = [
  baseAssetAddress: string,
  quoteAssetAddress: string,
  grossBaseQuantity: bigint,
  grossQuoteQuantity: bigint,
  netBaseQuantity: bigint,
  netQuoteQuantity: bigint,
  makerFeeAssetAddress: string,
  takerFeeAssetAddress: string,
  makerFeeQuantity: bigint,
  takerFeeQuantity: bigint,
  price: bigint,
  makerSide: bigint
] & {
  baseAssetAddress: string;
  quoteAssetAddress: string;
  grossBaseQuantity: bigint;
  grossQuoteQuantity: bigint;
  netBaseQuantity: bigint;
  netQuoteQuantity: bigint;
  makerFeeAssetAddress: string;
  takerFeeAssetAddress: string;
  makerFeeQuantity: bigint;
  takerFeeQuantity: bigint;
  price: bigint;
  makerSide: bigint;
};

export declare namespace BaseOrderUtils {
  export type CancelOrderParamsStruct = {
    order: OrderStruct;
    walletSignature: BytesLike;
  };

  export type CancelOrderParamsStructOutput = [
    order: OrderStructOutput,
    walletSignature: string
  ] & { order: OrderStructOutput; walletSignature: string };

  export type CreateOrderParamsStruct = {
    swapPath: AddressLike[];
    quantityInAssetUnits: BigNumberish;
    triggerPrice: BigNumberish;
    acceptablePrice: BigNumberish;
    minOutputAmount: BigNumberish;
    expiration: BigNumberish;
    orderType: BigNumberish;
    side: BigNumberish;
    timeInForce: BigNumberish;
    isLong: boolean;
  };

  export type CreateOrderParamsStructOutput = [
    swapPath: string[],
    quantityInAssetUnits: bigint,
    triggerPrice: bigint,
    acceptablePrice: bigint,
    minOutputAmount: bigint,
    expiration: bigint,
    orderType: bigint,
    side: bigint,
    timeInForce: bigint,
    isLong: boolean
  ] & {
    swapPath: string[];
    quantityInAssetUnits: bigint;
    triggerPrice: bigint;
    acceptablePrice: bigint;
    minOutputAmount: bigint;
    expiration: bigint;
    orderType: bigint;
    side: bigint;
    timeInForce: bigint;
    isLong: boolean;
  };
}

export declare namespace Types {
  export type OrderParamStruct = {
    trader: AddressLike;
    baseAssetAmount: BigNumberish;
    quoteAssetAmount: BigNumberish;
    orderType: BigNumberish;
    side: BigNumberish;
    expiration: BigNumberish;
    nonce: BigNumberish;
    walletSignature: BytesLike;
  };

  export type OrderParamStructOutput = [
    trader: string,
    baseAssetAmount: bigint,
    quoteAssetAmount: bigint,
    orderType: bigint,
    side: bigint,
    expiration: bigint,
    nonce: bigint,
    walletSignature: string
  ] & {
    trader: string;
    baseAssetAmount: bigint;
    quoteAssetAmount: bigint;
    orderType: bigint;
    side: bigint;
    expiration: bigint;
    nonce: bigint;
    walletSignature: string;
  };
}

export interface VDexV1Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "_walletExits"
      | "addDispatcher"
      | "addressConfig"
      | "callCoinPermit"
      | "cancelMultiple"
      | "createOrder"
      | "createOrderETH"
      | "createOrderWithPermit"
      | "decreasePositionRequestKeys"
      | "decreasePositionRequestKeysStart"
      | "decreasePositionRequests"
      | "decreasePositionsIndex"
      | "dispatcherWallets"
      | "executeOrderBookTrade"
      | "g_status"
      | "increasePositionRequestKeys"
      | "increasePositionRequestKeysStart"
      | "increasePositionRequests"
      | "increasePositionsIndex"
      | "initialize"
      | "loadFeeWallet"
      | "markets"
      | "nonce"
      | "numPairs"
      | "proxiableUUID"
      | "reverseDispatcherState"
      | "setFactoryAddress"
      | "setFeeWallet"
      | "totalHelds"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "CancelSwapOrder"
      | "ChainPropagationPeriodChanged"
      | "CreateDecreasePosition"
      | "CreateIncreasePosition"
      | "Deposited"
      | "ExecuteDecreasePosition"
      | "ExecuteIncreasePosition"
      | "Initialized"
      | "NewFactoryAddress"
      | "OrderBookTradeExecuted"
      | "OrderCreated"
      | "OrderNonceInvalidated"
      | "Upgraded"
      | "WalletExitCleared"
      | "WalletExited"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_walletExits",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addDispatcher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "callCoinPermit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMultiple",
    values: [BaseOrderUtils.CancelOrderParamsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [BaseOrderUtils.CreateOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrderETH",
    values: [BaseOrderUtils.CreateOrderParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrderWithPermit",
    values: [OrderStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionsIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dispatcherWallets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrderBookTrade",
    values: [
      Types.OrderParamStruct,
      Types.OrderParamStruct,
      OrderBookTradeStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "g_status", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequestKeysStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionsIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "loadFeeWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(functionFragment: "numPairs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reverseDispatcherState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactoryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalHelds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_walletExits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDispatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callCoinPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrderETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrderWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dispatcherWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrderBookTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "g_status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequestKeysStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionsIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loadFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reverseDispatcherState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalHelds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelSwapOrderEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    account: AddressLike,
    baseAsset: AddressLike,
    quoteAsset: AddressLike,
    baseAssetAmount: BigNumberish,
    quoteAssetAmount: BigNumberish
  ];
  export type OutputTuple = [
    orderHash: string,
    account: string,
    baseAsset: string,
    quoteAsset: string,
    baseAssetAmount: bigint,
    quoteAssetAmount: bigint
  ];
  export interface OutputObject {
    orderHash: string;
    account: string;
    baseAsset: string;
    quoteAsset: string;
    baseAssetAmount: bigint;
    quoteAssetAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainPropagationPeriodChangedEvent {
  export type InputTuple = [
    previousValue: BigNumberish,
    newValue: BigNumberish
  ];
  export type OutputTuple = [previousValue: bigint, newValue: bigint];
  export interface OutputObject {
    previousValue: bigint;
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateDecreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    depositToken: AddressLike,
    indexToken: AddressLike,
    collateralDelta: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    receiver: AddressLike,
    acceptablePrice: BigNumberish,
    minOut: BigNumberish,
    executionFee: BigNumberish,
    index: BigNumberish,
    queueIndex: BigNumberish,
    blockNumber: BigNumberish,
    blockTime: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    depositToken: string,
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    index: bigint,
    queueIndex: bigint,
    blockNumber: bigint,
    blockTime: bigint
  ];
  export interface OutputObject {
    account: string;
    depositToken: string;
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    index: bigint;
    queueIndex: bigint;
    blockNumber: bigint;
    blockTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateIncreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    depositToken: AddressLike,
    indexToken: AddressLike,
    amountIn: BigNumberish,
    minOut: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    acceptablePrice: BigNumberish,
    executionFee: BigNumberish,
    index: BigNumberish,
    queueIndex: BigNumberish,
    blockNumber: BigNumberish,
    blockTime: BigNumberish,
    gasPrice: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    depositToken: string,
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    index: bigint,
    queueIndex: bigint,
    blockNumber: bigint,
    blockTime: bigint,
    gasPrice: bigint
  ];
  export interface OutputObject {
    account: string;
    depositToken: string;
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    index: bigint;
    queueIndex: bigint;
    blockNumber: bigint;
    blockTime: bigint;
    gasPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    assetAddress: AddressLike,
    quantityInPips: BigNumberish,
    newExchangeBalanceInPips: BigNumberish,
    newExchangeBalanceInAssetUnits: BigNumberish
  ];
  export type OutputTuple = [
    wallet: string,
    assetAddress: string,
    quantityInPips: bigint,
    newExchangeBalanceInPips: bigint,
    newExchangeBalanceInAssetUnits: bigint
  ];
  export interface OutputObject {
    wallet: string;
    assetAddress: string;
    quantityInPips: bigint;
    newExchangeBalanceInPips: bigint;
    newExchangeBalanceInAssetUnits: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteDecreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    collateralDelta: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    receiver: AddressLike,
    acceptablePrice: BigNumberish,
    minOut: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    path: string[],
    indexToken: string,
    collateralDelta: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    receiver: string,
    acceptablePrice: bigint,
    minOut: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    path: string[];
    indexToken: string;
    collateralDelta: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    receiver: string;
    acceptablePrice: bigint;
    minOut: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteIncreasePositionEvent {
  export type InputTuple = [
    account: AddressLike,
    path: AddressLike[],
    indexToken: AddressLike,
    amountIn: BigNumberish,
    minOut: BigNumberish,
    sizeDelta: BigNumberish,
    isLong: boolean,
    acceptablePrice: BigNumberish,
    executionFee: BigNumberish,
    blockGap: BigNumberish,
    timeGap: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    path: string[],
    indexToken: string,
    amountIn: bigint,
    minOut: bigint,
    sizeDelta: bigint,
    isLong: boolean,
    acceptablePrice: bigint,
    executionFee: bigint,
    blockGap: bigint,
    timeGap: bigint
  ];
  export interface OutputObject {
    account: string;
    path: string[];
    indexToken: string;
    amountIn: bigint;
    minOut: bigint;
    sizeDelta: bigint;
    isLong: boolean;
    acceptablePrice: bigint;
    executionFee: bigint;
    blockGap: bigint;
    timeGap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewFactoryAddressEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderBookTradeExecutedEvent {
  export type InputTuple = [
    buyWallet: AddressLike,
    sellWallet: AddressLike,
    buyerInputUpdate: BigNumberish,
    sellerInputUpdate: BigNumberish,
    buyerOutputUpdate: BigNumberish,
    sellerOutputUpdate: BigNumberish,
    takerSide: BigNumberish
  ];
  export type OutputTuple = [
    buyWallet: string,
    sellWallet: string,
    buyerInputUpdate: bigint,
    sellerInputUpdate: bigint,
    buyerOutputUpdate: bigint,
    sellerOutputUpdate: bigint,
    takerSide: bigint
  ];
  export interface OutputObject {
    buyWallet: string;
    sellWallet: string;
    buyerInputUpdate: bigint;
    sellerInputUpdate: bigint;
    buyerOutputUpdate: bigint;
    sellerOutputUpdate: bigint;
    takerSide: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCreatedEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    makerAccountOwner: AddressLike,
    baseAsset: AddressLike,
    quoteAsset: AddressLike,
    orderType: BigNumberish,
    baseAssetAmount: BigNumberish,
    quoteAssetAmount: BigNumberish,
    orderSide: BigNumberish,
    expiration: BigNumberish,
    nonce: BigNumberish,
    isLong: boolean
  ];
  export type OutputTuple = [
    orderHash: string,
    makerAccountOwner: string,
    baseAsset: string,
    quoteAsset: string,
    orderType: bigint,
    baseAssetAmount: bigint,
    quoteAssetAmount: bigint,
    orderSide: bigint,
    expiration: bigint,
    nonce: bigint,
    isLong: boolean
  ];
  export interface OutputObject {
    orderHash: string;
    makerAccountOwner: string;
    baseAsset: string;
    quoteAsset: string;
    orderType: bigint;
    baseAssetAmount: bigint;
    quoteAssetAmount: bigint;
    orderSide: bigint;
    expiration: bigint;
    nonce: bigint;
    isLong: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderNonceInvalidatedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    nonce: BigNumberish,
    timestampInMs: BigNumberish,
    effectiveBlockNumber: BigNumberish
  ];
  export type OutputTuple = [
    wallet: string,
    nonce: bigint,
    timestampInMs: bigint,
    effectiveBlockNumber: bigint
  ];
  export interface OutputObject {
    wallet: string;
    nonce: bigint;
    timestampInMs: bigint;
    effectiveBlockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletExitClearedEvent {
  export type InputTuple = [wallet: AddressLike];
  export type OutputTuple = [wallet: string];
  export interface OutputObject {
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletExitedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    effectiveBlockNumber: BigNumberish
  ];
  export type OutputTuple = [wallet: string, effectiveBlockNumber: bigint];
  export interface OutputObject {
    wallet: string;
    effectiveBlockNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VDexV1 extends BaseContract {
  connect(runner?: ContractRunner | null): VDexV1;
  waitForDeployment(): Promise<this>;

  interface: VDexV1Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _walletExits: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { exists: boolean; effectiveBlockNumber: bigint }],
    "view"
  >;

  addDispatcher: TypedContractMethod<
    [newDispatcherWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  addressConfig: TypedContractMethod<
    [],
    [[string, string] & { factory: string; wETH: string }],
    "view"
  >;

  callCoinPermit: TypedContractMethod<[], [string], "view">;

  cancelMultiple: TypedContractMethod<
    [_swapOrders: BaseOrderUtils.CancelOrderParamsStruct[]],
    [void],
    "nonpayable"
  >;

  createOrder: TypedContractMethod<
    [params: BaseOrderUtils.CreateOrderParamsStruct],
    [void],
    "nonpayable"
  >;

  createOrderETH: TypedContractMethod<
    [params: BaseOrderUtils.CreateOrderParamsStruct],
    [void],
    "payable"
  >;

  createOrderWithPermit: TypedContractMethod<
    [order_: OrderStruct, permit: BytesLike, signature: BytesLike],
    [string],
    "nonpayable"
  >;

  decreasePositionRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  decreasePositionRequestKeysStart: TypedContractMethod<[], [bigint], "view">;

  decreasePositionRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        account: string;
        depositToken: string;
        indexToken: string;
        collateralDelta: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        receiver: string;
        acceptablePrice: bigint;
        minOut: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        withdrawETH: boolean;
      }
    ],
    "view"
  >;

  decreasePositionsIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  dispatcherWallets: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  executeOrderBookTrade: TypedContractMethod<
    [
      buy: Types.OrderParamStruct,
      sell: Types.OrderParamStruct,
      orderBookTrade: OrderBookTradeStruct
    ],
    [void],
    "nonpayable"
  >;

  g_status: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  increasePositionRequestKeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  increasePositionRequestKeysStart: TypedContractMethod<[], [bigint], "view">;

  increasePositionRequests: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        account: string;
        depositToken: string;
        indexToken: string;
        amountIn: bigint;
        minOut: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        acceptablePrice: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        hasCollateralInETH: boolean;
      }
    ],
    "view"
  >;

  increasePositionsIndex: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _wETH: AddressLike,
      _dispatcherWallet: AddressLike,
      _callCoinPermit: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  loadFeeWallet: TypedContractMethod<[], [string], "view">;

  markets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, string, bigint, bigint] & {
        pool: string;
        token0: string;
        token1: string;
        marginLimit: bigint;
        priceUpdater: string;
        pool0Insurance: bigint;
        pool1Insurance: bigint;
      }
    ],
    "view"
  >;

  nonce: TypedContractMethod<[], [bigint], "view">;

  numPairs: TypedContractMethod<[], [bigint], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  reverseDispatcherState: TypedContractMethod<
    [dispatcherWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  setFactoryAddress: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeWallet: TypedContractMethod<
    [newFeeWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  totalHelds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_walletExits"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, bigint] & { exists: boolean; effectiveBlockNumber: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "addDispatcher"
  ): TypedContractMethod<
    [newDispatcherWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addressConfig"
  ): TypedContractMethod<
    [],
    [[string, string] & { factory: string; wETH: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "callCoinPermit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelMultiple"
  ): TypedContractMethod<
    [_swapOrders: BaseOrderUtils.CancelOrderParamsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [params: BaseOrderUtils.CreateOrderParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createOrderETH"
  ): TypedContractMethod<
    [params: BaseOrderUtils.CreateOrderParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createOrderWithPermit"
  ): TypedContractMethod<
    [order_: OrderStruct, permit: BytesLike, signature: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreasePositionRequestKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "decreasePositionRequestKeysStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreasePositionRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        account: string;
        depositToken: string;
        indexToken: string;
        collateralDelta: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        receiver: string;
        acceptablePrice: bigint;
        minOut: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        withdrawETH: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "decreasePositionsIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dispatcherWallets"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "executeOrderBookTrade"
  ): TypedContractMethod<
    [
      buy: Types.OrderParamStruct,
      sell: Types.OrderParamStruct,
      orderBookTrade: OrderBookTradeStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "g_status"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequestKeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequestKeysStart"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increasePositionRequests"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        account: string;
        depositToken: string;
        indexToken: string;
        amountIn: bigint;
        minOut: bigint;
        sizeDelta: bigint;
        isLong: boolean;
        acceptablePrice: bigint;
        executionFee: bigint;
        blockNumber: bigint;
        blockTime: bigint;
        hasCollateralInETH: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "increasePositionsIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _wETH: AddressLike,
      _dispatcherWallet: AddressLike,
      _callCoinPermit: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "loadFeeWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, string, bigint, bigint] & {
        pool: string;
        token0: string;
        token1: string;
        marginLimit: bigint;
        priceUpdater: string;
        pool0Insurance: bigint;
        pool1Insurance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numPairs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reverseDispatcherState"
  ): TypedContractMethod<[dispatcherWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFactoryAddress"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeWallet"
  ): TypedContractMethod<[newFeeWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalHelds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "CancelSwapOrder"
  ): TypedContractEvent<
    CancelSwapOrderEvent.InputTuple,
    CancelSwapOrderEvent.OutputTuple,
    CancelSwapOrderEvent.OutputObject
  >;
  getEvent(
    key: "ChainPropagationPeriodChanged"
  ): TypedContractEvent<
    ChainPropagationPeriodChangedEvent.InputTuple,
    ChainPropagationPeriodChangedEvent.OutputTuple,
    ChainPropagationPeriodChangedEvent.OutputObject
  >;
  getEvent(
    key: "CreateDecreasePosition"
  ): TypedContractEvent<
    CreateDecreasePositionEvent.InputTuple,
    CreateDecreasePositionEvent.OutputTuple,
    CreateDecreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "CreateIncreasePosition"
  ): TypedContractEvent<
    CreateIncreasePositionEvent.InputTuple,
    CreateIncreasePositionEvent.OutputTuple,
    CreateIncreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteDecreasePosition"
  ): TypedContractEvent<
    ExecuteDecreasePositionEvent.InputTuple,
    ExecuteDecreasePositionEvent.OutputTuple,
    ExecuteDecreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteIncreasePosition"
  ): TypedContractEvent<
    ExecuteIncreasePositionEvent.InputTuple,
    ExecuteIncreasePositionEvent.OutputTuple,
    ExecuteIncreasePositionEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewFactoryAddress"
  ): TypedContractEvent<
    NewFactoryAddressEvent.InputTuple,
    NewFactoryAddressEvent.OutputTuple,
    NewFactoryAddressEvent.OutputObject
  >;
  getEvent(
    key: "OrderBookTradeExecuted"
  ): TypedContractEvent<
    OrderBookTradeExecutedEvent.InputTuple,
    OrderBookTradeExecutedEvent.OutputTuple,
    OrderBookTradeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCreated"
  ): TypedContractEvent<
    OrderCreatedEvent.InputTuple,
    OrderCreatedEvent.OutputTuple,
    OrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderNonceInvalidated"
  ): TypedContractEvent<
    OrderNonceInvalidatedEvent.InputTuple,
    OrderNonceInvalidatedEvent.OutputTuple,
    OrderNonceInvalidatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WalletExitCleared"
  ): TypedContractEvent<
    WalletExitClearedEvent.InputTuple,
    WalletExitClearedEvent.OutputTuple,
    WalletExitClearedEvent.OutputObject
  >;
  getEvent(
    key: "WalletExited"
  ): TypedContractEvent<
    WalletExitedEvent.InputTuple,
    WalletExitedEvent.OutputTuple,
    WalletExitedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "CancelSwapOrder(bytes32,address,address,address,uint256,uint256)": TypedContractEvent<
      CancelSwapOrderEvent.InputTuple,
      CancelSwapOrderEvent.OutputTuple,
      CancelSwapOrderEvent.OutputObject
    >;
    CancelSwapOrder: TypedContractEvent<
      CancelSwapOrderEvent.InputTuple,
      CancelSwapOrderEvent.OutputTuple,
      CancelSwapOrderEvent.OutputObject
    >;

    "ChainPropagationPeriodChanged(uint256,uint256)": TypedContractEvent<
      ChainPropagationPeriodChangedEvent.InputTuple,
      ChainPropagationPeriodChangedEvent.OutputTuple,
      ChainPropagationPeriodChangedEvent.OutputObject
    >;
    ChainPropagationPeriodChanged: TypedContractEvent<
      ChainPropagationPeriodChangedEvent.InputTuple,
      ChainPropagationPeriodChangedEvent.OutputTuple,
      ChainPropagationPeriodChangedEvent.OutputObject
    >;

    "CreateDecreasePosition(address,address,address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreateDecreasePositionEvent.InputTuple,
      CreateDecreasePositionEvent.OutputTuple,
      CreateDecreasePositionEvent.OutputObject
    >;
    CreateDecreasePosition: TypedContractEvent<
      CreateDecreasePositionEvent.InputTuple,
      CreateDecreasePositionEvent.OutputTuple,
      CreateDecreasePositionEvent.OutputObject
    >;

    "CreateIncreasePosition(address,address,address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CreateIncreasePositionEvent.InputTuple,
      CreateIncreasePositionEvent.OutputTuple,
      CreateIncreasePositionEvent.OutputObject
    >;
    CreateIncreasePosition: TypedContractEvent<
      CreateIncreasePositionEvent.InputTuple,
      CreateIncreasePositionEvent.OutputTuple,
      CreateIncreasePositionEvent.OutputObject
    >;

    "Deposited(address,address,uint64,uint64,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "ExecuteDecreasePosition(address,address[],address,uint256,uint256,bool,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExecuteDecreasePositionEvent.InputTuple,
      ExecuteDecreasePositionEvent.OutputTuple,
      ExecuteDecreasePositionEvent.OutputObject
    >;
    ExecuteDecreasePosition: TypedContractEvent<
      ExecuteDecreasePositionEvent.InputTuple,
      ExecuteDecreasePositionEvent.OutputTuple,
      ExecuteDecreasePositionEvent.OutputObject
    >;

    "ExecuteIncreasePosition(address,address[],address,uint256,uint256,uint256,bool,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExecuteIncreasePositionEvent.InputTuple,
      ExecuteIncreasePositionEvent.OutputTuple,
      ExecuteIncreasePositionEvent.OutputObject
    >;
    ExecuteIncreasePosition: TypedContractEvent<
      ExecuteIncreasePositionEvent.InputTuple,
      ExecuteIncreasePositionEvent.OutputTuple,
      ExecuteIncreasePositionEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewFactoryAddress(address)": TypedContractEvent<
      NewFactoryAddressEvent.InputTuple,
      NewFactoryAddressEvent.OutputTuple,
      NewFactoryAddressEvent.OutputObject
    >;
    NewFactoryAddress: TypedContractEvent<
      NewFactoryAddressEvent.InputTuple,
      NewFactoryAddressEvent.OutputTuple,
      NewFactoryAddressEvent.OutputObject
    >;

    "OrderBookTradeExecuted(address,address,uint256,uint256,uint256,uint256,uint8)": TypedContractEvent<
      OrderBookTradeExecutedEvent.InputTuple,
      OrderBookTradeExecutedEvent.OutputTuple,
      OrderBookTradeExecutedEvent.OutputObject
    >;
    OrderBookTradeExecuted: TypedContractEvent<
      OrderBookTradeExecutedEvent.InputTuple,
      OrderBookTradeExecutedEvent.OutputTuple,
      OrderBookTradeExecutedEvent.OutputObject
    >;

    "OrderCreated(bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;
    OrderCreated: TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;

    "OrderNonceInvalidated(address,uint128,uint128,uint256)": TypedContractEvent<
      OrderNonceInvalidatedEvent.InputTuple,
      OrderNonceInvalidatedEvent.OutputTuple,
      OrderNonceInvalidatedEvent.OutputObject
    >;
    OrderNonceInvalidated: TypedContractEvent<
      OrderNonceInvalidatedEvent.InputTuple,
      OrderNonceInvalidatedEvent.OutputTuple,
      OrderNonceInvalidatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WalletExitCleared(address)": TypedContractEvent<
      WalletExitClearedEvent.InputTuple,
      WalletExitClearedEvent.OutputTuple,
      WalletExitClearedEvent.OutputObject
    >;
    WalletExitCleared: TypedContractEvent<
      WalletExitClearedEvent.InputTuple,
      WalletExitClearedEvent.OutputTuple,
      WalletExitClearedEvent.OutputObject
    >;

    "WalletExited(address,uint256)": TypedContractEvent<
      WalletExitedEvent.InputTuple,
      WalletExitedEvent.OutputTuple,
      WalletExitedEvent.OutputObject
    >;
    WalletExited: TypedContractEvent<
      WalletExitedEvent.InputTuple,
      WalletExitedEvent.OutputTuple,
      WalletExitedEvent.OutputObject
    >;
  };
}
