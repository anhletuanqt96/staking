/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EIP712,
  EIP712Interface,
} from "../../../contracts/libraries/EIP712";

const _abi = [
  {
    inputs: [],
    name: "PLACEORDER_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063dbc9169f146038575b600080fd5b605e7f0bc47487dd918b119ea643438a3ab6e12a102adac63578860b9727b4b08f9b9381565b60405190815260200160405180910390f3fea264697066735822122040c47388d3e7eeb3ed2fdf16f666d7b6d510d3413aa2320ba1fc27ed4b8473b164736f6c63430008120033";

type EIP712ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EIP712ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EIP712__factory extends ContractFactory {
  constructor(...args: EIP712ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EIP712 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EIP712__factory {
    return super.connect(runner) as EIP712__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EIP712Interface {
    return new Interface(_abi) as EIP712Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): EIP712 {
    return new Contract(address, _abi, runner) as unknown as EIP712;
  }
}
